{"version":3,"sources":["styles/images/undraw_online_payments_re_y8f2.svg","actions/index.js","pages/Login.js","components/Form.js","components/Header.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","fetchApi","fetch","then","response","json","Login","state","email","password","handleChange","bind","onSubmit","this","props","history","dispatchValue","push","target","name","value","setState","className","type","id","onChange","data-testid","placeholder","disabled","length","match","onClick","src","loginImage","alt","React","Component","connect","dispatch","payload","Form","formInfo","description","currency","method","tag","exchangeRates","currencies","handleClick","handleSelect","addValue","a","rates","Object","keys","filter","htmlFor","map","code","index","key","wallet","user","data","entries","reduce","acc","rate","requestExchanges","Header","sumExpenses","expenses","prev","curr","parseFloat","ask","toFixed","defaultProps","Table","deleteItem","expense","currencyName","split","currencyValue","convertedValue","deleteExpense","Wallet","App","exact","path","component","Boolean","window","location","hostname","INITIAL_STATE","action","editExpense","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.484cc81e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_online_payments_re_y8f2.6565bfeb.svg\";","// Coloque aqui suas actions\n\nexport const userLogin = (payload) => ({ type: 'USER_LOGIN', payload });\n\nexport const addExpense = (payload) => ({ type: 'ADD_EXPENSE', payload });\n\nexport const deleteExpense = (id) => ({ type: 'DELETE_EXPENSE', id });\n\n// export const editExpense = (id) => ({ type: 'EDIT_EXPENSE', id });\n\nexport const saveEditExpense = () => ({});\n\nconst API_URL = 'https://economia.awesomeapi.com.br/json/all';\n\nexport const fetchApi = () => fetch(API_URL)\n  .then((response) => response.json());\n// https://economia.awesomeapi.com.br/json/all\n\nexport const requestExchanges = (data) => (dispatch) => fetchApi().then((rates) => {\n  const exchangeRates = Object.entries(rates)\n    .reduce((acc, [currency, rate]) => ({ ...acc, [currency]: rate }), {});\n  dispatch(addExpense({ ...data, exchangeRates }));\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { userLogin } from '../actions';\n\nimport '../styles/login.css';\nimport loginImage from '../styles/images/undraw_online_payments_re_y8f2.svg';\n\n// validação de email\n// senha 6 caracteres\n// botao desabilitado\n\n// salvar no estado\n// mudar rota para /carteira\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit() {\n    const { history, dispatchValue } = this.props;\n    const { email } = this.state;\n\n    dispatchValue(email);\n    history.push('/carteira');\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { email, password } = this.state;\n    const minNumber = 6;\n\n    return (\n      <div className=\"login-container\">\n        <div className=\"login-form\">\n          <p>TRYBEWALLET</p>\n\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"email\"\n            value={ email }\n            onChange={ this.handleChange }\n            data-testid=\"email-input\"\n            placeholder=\"email\"\n          />\n\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={ password }\n            onChange={ this.handleChange }\n            data-testid=\"password-input\"\n            placeholder=\"password\"\n          />\n\n          <button\n            type=\"button\"\n            disabled={ password.length < minNumber || !email.match(/\\S+@\\S+\\.\\S+/) }\n            onClick={ this.onSubmit }\n          >\n            Entrar\n\n          </button>\n        </div>\n\n        <div className=\"login-image\">\n          <img src={ loginImage } alt=\"login ilustration\" />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatchValue: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchValue: (email) => dispatch(userLogin(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchApi, requestExchanges } from '../actions';\n\nimport '../styles/form.css';\n\nclass Form extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      formInfo: {\n        id: 0,\n        value: '',\n        description: '',\n        currency: 'USD',\n        method: 'Dinheiro',\n        tag: 'Alimentação',\n        exchangeRates: {},\n      },\n      currencies: [],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleSelect();\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    const { formInfo } = this.state;\n    this.setState({ formInfo: {\n      ...formInfo,\n      [name]: value,\n    } });\n  }\n\n  handleClick() {\n    const { addValue } = this.props;\n    const { formInfo } = this.state;\n    const { id } = formInfo;\n\n    addValue(formInfo);\n    this.setState({\n      formInfo: {\n        ...formInfo,\n        id: id + 1,\n        value: 0,\n        description: '',\n      },\n    });\n  }\n\n  async handleSelect() {\n    const rates = await fetchApi();\n    const currencies = Object.keys(rates).filter((currency) => currency !== 'USDT');\n    this.setState({ currencies });\n    // console.log(currencies);\n  }\n\n  render() {\n    const { formInfo, currencies } = this.state;\n    const { value, description, currency } = formInfo;\n\n    return (\n      <div className=\"form-container\">\n        <form>\n          <label htmlFor=\"value\">\n            Valor:\n            <input\n              id=\"value\"\n              type=\"number\"\n              placeholder=\"Valor gasto\"\n              name=\"value\"\n              value={ value }\n              data-testid=\"value-input\"\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label htmlFor=\"description\">\n            Descrição:\n            <input\n              id=\"description\"\n              type=\"text\"\n              placeholder=\"Descrição do gasto\"\n              name=\"description\"\n              value={ description }\n              data-testid=\"description-input\"\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label htmlFor=\"currency-input\">\n            Moeda:\n            <select\n              id=\"currency-input\"\n              name=\"currency\"\n              data-testid=\"currency-input\"\n              onChange={ this.handleChange }\n              value={ currency }\n            >\n              {currencies.map((code, index) => (\n                <option data-testid={ code } key={ index }>{ code }</option>\n              ))}\n            </select>\n          </label>\n\n          <label htmlFor=\"method\">\n            Método de pagamento:\n            <select\n              id=\"method\"\n              name=\"method\"\n              data-testid=\"method-input\"\n              onChange={ this.handleChange }\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"tag\">\n            Tipo de gasto:\n            <select\n              id=\"tag\"\n              name=\"tag\"\n              data-testid=\"tag-input\"\n              onChange={ this.handleChange }\n            >\n              <option>Alimentação</option>\n              <option>Lazer</option>\n              <option>Trabalho</option>\n              <option>Transporte</option>\n              <option>Saúde</option>\n            </select>\n          </label>\n\n          {/* esse botão deve: salvar os valores na aplicação, atualiza\n          a soma, salvar a cotação do cambio,\n          após salvar o total no header deve ser somado */}\n          <button\n            type=\"button\"\n            onClick={ this.handleClick }\n            className=\"form-btn\"\n          >\n            Adicionar despesa\n          </button>\n\n        </form>\n      </div>\n    );\n  }\n}\n\nForm.propTypes = {\n  addValue: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  email: state.user.email,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addValue: (data) => dispatch(requestExchanges(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport '../styles/header.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.sumExpenses = this.sumExpenses.bind(this);\n  }\n\n  sumExpenses() {\n    const { expenses } = this.props;\n    // console.log(expenses);\n    // // console.log(typeof expenses);\n    return expenses.reduce((prev, curr) => {\n      // console.log(curr.exchangeRates[curr.currency].ask);\n      const currencyValue = parseFloat(curr.exchangeRates[curr.currency].ask);\n      const convertedValue = currencyValue * parseFloat(curr.value);\n\n      return prev + convertedValue;\n    }, 0).toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header className=\"header-container\">\n        <p className=\"header-title\">TRYBEWALLET</p>\n        <div className=\"header-user-info\">\n          <p data-testid=\"email-field\">{ email }</p>\n          <p data-testid=\"total-field\">{ this.sumExpenses() }</p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  expenses: PropTypes.arrayOf(PropTypes.shape({ value: PropTypes.string })),\n};\n\nHeader.defaultProps = {\n  expenses: [],\n  email: '',\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteExpense } from '../actions';\n// import EditForm from './EditForm';\n\nimport '../styles/table.css';\n\nclass Table extends Component {\n  // constructor() {\n  //   super();\n\n  //   this.state = {\n  //     isEditing: false,\n  //     editExp: [],\n  //   };\n\n  //   this.handleEditButton = this.handleEditButton.bind(this);\n  // }\n\n  // handleEditButton({ target }) {\n  //   const { expenses } = this.props;\n  //   const { id } = target;\n  //   // console.log(typeof id);\n  //   const numberId = Number(id);\n  //   // console.log(typeof numberId);\n  //   this.setState({ isEditing: true });\n\n  //   expenses.filter((expense) => (expense.id === numberId\n  //     ? this.setState({ editExp: expense }) : null));\n  // }\n\n  render() {\n    const { expenses, deleteItem } = this.props;\n    // const { isEditing, editExp } = this.state;\n    return (\n      <div className=\"table-container\">\n        <table>\n          <tbody>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Excluir</th>\n            </tr>\n            {expenses.map((expense) => {\n              const {\n                currency,\n                description,\n                exchangeRates,\n                id,\n                method,\n                tag,\n                value,\n              } = expense;\n              const bothCurrencyName = exchangeRates[currency].name;\n              // nome vem 'nome da moeda'/'real brasileiro', split para separar\n              const splitCurrencyName = bothCurrencyName.split('/');\n              // nome da moeda está no primeiro\n              const currencyName = splitCurrencyName[0];\n\n              const currencyValue = exchangeRates[currency].ask;\n              const convertedValue = parseFloat(value) * parseFloat(currencyValue);\n              // console.log(currencyValue);\n              return (\n                <tr key={ id } id={ id }>\n                  <td>{ description }</td>\n                  <td>{ tag }</td>\n                  <td>{ method }</td>\n                  <td>{ value }</td>\n                  <td>{ currencyName }</td>\n                  <td>{ parseFloat(currencyValue).toFixed(2) }</td>\n                  <td>{ convertedValue.toFixed(2) }</td>\n                  <td>Real</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      onClick={ () => { deleteItem(id); } }\n                    >\n                      <i className=\"bi bi-trash\" />\n\n                    </button>\n\n                    {/* <button\n                      type=\"button\"\n                      data-testid=\"edit-btn\"\n                      onClick={ this.handleEditButton }\n                      id={ id }\n                    >\n                      Editar despesa\n                    </button> */}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        {/* { isEditing ? <EditForm editExp={ editExp } /> : null } */}\n      </div>\n\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({\n    currency: PropTypes.string,\n  })),\n  deleteItem: PropTypes.func.isRequired,\n};\n\nTable.defaultProps = {\n  expenses: [],\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\n// mandar o index pq o reducer vai fazer um filtro para tirar o index selecionado\nconst mapDispatchToProps = (dispatch) => ({\n  deleteItem: (id) => dispatch(deleteExpense(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport Form from '../components/Form';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\n\nimport '../styles/form.css';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"form-table-container\">\n          <Form />\n          <Table />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\n\n// USER_LOGIN\n\nconst INITIAL_STATE = {\n  user: {\n    email: '',\n  },\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'USER_LOGIN':\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editExpense: [],\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case 'ADD_EXPENSE':\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  case 'ADD_CURRENCES':\n    return { ...state, currencies: action.payload };\n  case 'DELETE_EXPENSE':\n    return {\n      ...state, expenses: state.expenses.filter((expense) => expense.id !== action.id) };\n  // case 'EDIT_EXPENSE':\n  //   return {\n  //     ...state, editExpenses: console.log('wallet') };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\n// import user from './user';\nimport user from './user';\n// import wallet from './wallet';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}